I"<h1 id="library-usage">Library Usage</h1>
<hr />

<p>The following scripts are included</p>
<ul>
  <li><a href="usage.html#make-pchk">make-pchk</a></li>
  <li><a href="usage.html#encode">encode</a></li>
  <li><a href="usage.html#decode">decode</a></li>
</ul>

<p>The encoding script requires prequisite calls to the base libraryâ€™s programs. For reference purposes, you can find the documentation for that library <a href="./LDPC-codes/progs.html">here</a>.</p>

<h2 id="make-pchk">make-pchk</h2>
<p>Creates a regular or protograph parity check matrix</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 make-pchk.py <span class="nt">--output-pchk</span> pchk-file <span class="nt">--code-type</span> <span class="o">{</span>regular, protograph<span class="o">}</span> <span class="nt">--construction</span> construction-option build-params
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>build-params:
if --code-type == protograph:
    build-params: --protograph-file protograph-file --expansion-factor lift-factor 
if --code-type == regular: 
    build-params: --n-checks num-rows --n-bits num-cols --ones-per-col ones-per-column [-f percent-transmitted]
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th style="text-align: center">code-type</th>
      <th>construction options</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">regular</td>
      <td><ul><li>gallager</li><li>random</li><li>populate-rows</li><li>populate-columns</li></ul></td>
    </tr>
    <tr>
      <td style="text-align: center">protograph</td>
      <td><ul><li>permutation</li><li>regular</li><li>quasi-cyclic</li><li>permuted-quasi-cyclic</li></ul></td>
    </tr>
  </tbody>
</table>

<p>This script generates a readable parity check code represented by the following files</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pchk-file
pchk-file.transmitted
</code></pre></div></div>

<ul>
  <li>the pchk file contains the machine-readable fully constructed LDPC code</li>
  <li>if puncturing is implemented, an additional pchk-file.transmitted file is created containing the necessary meta information for puncturing. If puncturing is not implemented, this file is not created.</li>
</ul>

<p>the .transmitted file contains the puncturing information</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>total bits before transmission: code-width
<span class="o">[</span>space separated list of transmitted bit indices]
</code></pre></div></div>
<ul>
  <li>Puncturing for protographs is defined within the protograph template passed - the punctured indices are excluded from the list of transmitted bits within the protograph. Read more <a href="TODO">here</a>.</li>
  <li>Puncturing for regular codes is achieved with the optional -f flag. if this flag is provided, the value passed specifies the proportion of bits to transmit; a .transmitted file is generated accordingly. Read more <a href="TODO">here</a>.</li>
</ul>

<p>If puncturing is implemented, you can mess with the default configuration by altering the index list within the .transmitted file.</p>

<h2 id="encode">encode</h2>
<p>Encodes a message provided a parity check code</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 encode.py <span class="nt">--pchk-file</span> pchk-file <span class="nt">--gen-file</span> gen-file <span class="nt">--input-file</span> message-file <span class="nt">--output-file</span> encoded-file 
</code></pre></div></div>
<p>This script implements a wrapper of the base-libraryâ€™s encode program which requires
the construction of a generator matrix before encoding.</p>

<p>To achieve this, run</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>../LDPC-codes/make-gen pchk-file gen-file method
</code></pre></div></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>method:
    - sparse
    - dense
    - mixed
</code></pre></div></div>
<p>pchk-file is the file containing the parity check matrix from which to build the generator matrix. If the parity check file was generated using the make-pchk.py script, the pchk file is to be passed not the .transmitted</p>

<p>gen-file is the filepath of the output generator matrix file. <br />
method is the encoding schema for the generator matrix file.</p>

<h3 id="in-the-context-of-the-python-encode-script">In the context of the python encode script:</h3>

<ul>
  <li>pchk-file refers to the parity check matrix file. The local directory will be searched for a .transmitted file as an indicator for puncturing to take place.</li>
  <li>gen-file refers to the path of the generator matrix file corresponding to the specified parity check code.</li>
  <li>message-file refers to the filepath of the message to be encoded as a string of 1s and 0s.</li>
  <li>encoded-file refers to the path of the encoded message.</li>
</ul>

<p>The contained encoded-file contains the encoded codewords after puncturing, separated by newline characters.</p>

<h2 id="decode">Decode</h2>
<p>Decodes a given message according to the following</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 decode.py <span class="nt">--pchk-file</span> pchk-file <span class="nt">--received-file</span> message-to-decode <span class="nt">--output-file</span> decodeed-output <span class="nt">--channel</span> <span class="o">{</span>bsc, awgn<span class="o">}</span> <span class="nt">--channel-parameters</span> channel-value <span class="o">[</span><span class="nt">--decode-iterations</span> decode-iterations]
</code></pre></div></div>
<ul>
  <li>pchk-fil is the parity check code. The local directory will be searched for a .transmitted file which would indicate puncturing.</li>
  <li>received-file is the file produced as a result of the encoding, after undergoing some corruption (the base library provides a <a href="./LDPC-codes/channel.html#transmit">transmit</a> function which induces corruption according to a binary-symetric or gaussian noice channel). the channel and channel-value parameters must match the corruption schema which was induced through the transmission.</li>
  <li>decode-iterations dictates the number of decoding iterations used in the belief propagation decoding. The decode script implements a wrapper of the <a href="./LDPC-codes/decoding.html#decode">decode</a> function of the base library, and the iteration value is directly passed as an argument to the base decode program.</li>
  <li>decoded-file is the filepath of the output of the decoding. Each decoded message is separated by a newline character</li>
</ul>
:ET